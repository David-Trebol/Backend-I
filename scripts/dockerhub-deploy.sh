#!/bin/bash

# Script para construir y subir imagen a DockerHub
set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuraci√≥n
DOCKER_USERNAME=${DOCKER_USERNAME:-"tu-usuario-dockerhub"}
IMAGE_NAME="backend-i"
VERSION=${VERSION:-"latest"}
FULL_IMAGE_NAME="${DOCKER_USERNAME}/${IMAGE_NAME}:${VERSION}"

echo -e "${BLUE}üê≥ Script de Despliegue a DockerHub${NC}"
echo -e "${BLUE}=====================================${NC}"

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  build     Construir imagen Docker"
    echo "  push      Subir imagen a DockerHub"
    echo "  deploy    Construir y subir imagen (build + push)"
    echo "  login     Hacer login en DockerHub"
    echo "  clean     Limpiar im√°genes locales"
    echo "  help      Mostrar esta ayuda"
    echo ""
    echo "Variables de entorno:"
    echo "  DOCKER_USERNAME    Usuario de DockerHub (default: tu-usuario-dockerhub)"
    echo "  VERSION           Versi√≥n de la imagen (default: latest)"
    echo ""
    echo "Ejemplo:"
    echo "  DOCKER_USERNAME=mi-usuario VERSION=v1.0.0 $0 deploy"
}

# Funci√≥n para verificar si Docker est√° corriendo
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker no est√° corriendo. Por favor inicia Docker Desktop.${NC}"
        exit 1
    fi
}

# Funci√≥n para verificar si el usuario est√° logueado en DockerHub
check_dockerhub_login() {
    if ! docker info | grep -q "Username:"; then
        echo -e "${YELLOW}‚ö†Ô∏è  No est√°s logueado en DockerHub. Ejecuta: $0 login${NC}"
        return 1
    fi
    return 0
}

# Funci√≥n para hacer login en DockerHub
dockerhub_login() {
    echo -e "${YELLOW}üîê Iniciando sesi√≥n en DockerHub...${NC}"
    echo "Por favor, introduce tus credenciales de DockerHub:"
    docker login
    echo -e "${GREEN}‚úÖ Login exitoso${NC}"
}

# Funci√≥n para construir la imagen
build_image() {
    echo -e "${YELLOW}üì¶ Construyendo imagen Docker...${NC}"
    echo -e "${BLUE}Imagen: ${FULL_IMAGE_NAME}${NC}"
    
    docker build -f Dockerfile.final -t ${FULL_IMAGE_NAME} .
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Imagen construida exitosamente${NC}"
        
        # Mostrar informaci√≥n de la imagen
        echo -e "${BLUE}üìã Informaci√≥n de la imagen:${NC}"
        docker images ${FULL_IMAGE_NAME}
    else
        echo -e "${RED}‚ùå Error construyendo imagen${NC}"
        exit 1
    fi
}

# Funci√≥n para subir la imagen
push_image() {
    echo -e "${YELLOW}üöÄ Subiendo imagen a DockerHub...${NC}"
    echo -e "${BLUE}Imagen: ${FULL_IMAGE_NAME}${NC}"
    
    docker push ${FULL_IMAGE_NAME}
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Imagen subida exitosamente${NC}"
        echo -e "${BLUE}üîó Tu imagen est√° disponible en:${NC}"
        echo -e "${BLUE}   https://hub.docker.com/r/${DOCKER_USERNAME}/${IMAGE_NAME}${NC}"
        echo -e "${BLUE}   docker pull ${FULL_IMAGE_NAME}${NC}"
    else
        echo -e "${RED}‚ùå Error subiendo imagen${NC}"
        exit 1
    fi
}

# Funci√≥n para limpiar im√°genes locales
clean_images() {
    echo -e "${YELLOW}üßπ Limpiando im√°genes locales...${NC}"
    
    # Eliminar imagen espec√≠fica
    docker rmi ${FULL_IMAGE_NAME} 2>/dev/null || true
    
    # Limpiar im√°genes no utilizadas
    docker image prune -f
    
    echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
}

# Funci√≥n para desplegar (build + push)
deploy_image() {
    echo -e "${BLUE}üöÄ Iniciando despliegue completo...${NC}"
    
    check_docker
    
    build_image
    
    if ! check_dockerhub_login; then
        dockerhub_login
    fi
    
    push_image
    
    echo -e "${GREEN}üéâ Despliegue completado exitosamente!${NC}"
    echo -e "${BLUE}üìã Resumen:${NC}"
    echo -e "   Imagen: ${FULL_IMAGE_NAME}"
    echo -e "   DockerHub: https://hub.docker.com/r/${DOCKER_USERNAME}/${IMAGE_NAME}"
    echo -e "   Comando pull: docker pull ${FULL_IMAGE_NAME}"
}

# Funci√≥n para generar README con informaci√≥n de Docker
generate_docker_readme() {
    echo -e "${YELLOW}üìù Generando informaci√≥n para README...${NC}"
    
    cat > DOCKER_INFO.md << EOF
# üê≥ Informaci√≥n de Docker

## Imagen DockerHub

La aplicaci√≥n est√° disponible como imagen Docker en DockerHub:

**Imagen:** \`${FULL_IMAGE_NAME}\`

**Enlace:** https://hub.docker.com/r/${DOCKER_USERNAME}/${IMAGE_NAME}

## Uso R√°pido

### Descargar y ejecutar

\`\`\`bash
# Descargar la imagen
docker pull ${FULL_IMAGE_NAME}

# Ejecutar la aplicaci√≥n
docker run -p 3000:3000 ${FULL_IMAGE_NAME}
\`\`\`

### Con Docker Compose

\`\`\`bash
# Clonar el repositorio
git clone <tu-repositorio>
cd backend-i

# Ejecutar con Docker Compose
docker-compose -f docker-compose.final.yml up -d
\`\`\`

## Variables de Entorno

\`\`\`bash
docker run -p 3000:3000 \\
  -e MONGODB_URI=mongodb://localhost:27017/backend \\
  -e REDIS_URL=redis://localhost:6379 \\
  -e JWT_SECRET=tu-jwt-secret \\
  ${FULL_IMAGE_NAME}
\`\`\`

## Documentaci√≥n API

Una vez ejecutando, la documentaci√≥n Swagger estar√° disponible en:
http://localhost:3000/api-docs

## Versiones Disponibles

- \`latest\` - √öltima versi√≥n estable
- \`v1.0.0\` - Versi√≥n espec√≠fica (si aplica)

## Soporte

Para reportar problemas o solicitar funcionalidades, visita:
<tu-repositorio-github>
EOF

    echo -e "${GREEN}‚úÖ Archivo DOCKER_INFO.md generado${NC}"
}

# Procesar argumentos
case "${1:-help}" in
    "build")
        check_docker
        build_image
        ;;
    "push")
        check_docker
        if ! check_dockerhub_login; then
            dockerhub_login
        fi
        push_image
        ;;
    "deploy")
        deploy_image
        generate_docker_readme
        ;;
    "login")
        check_docker
        dockerhub_login
        ;;
    "clean")
        clean_images
        ;;
    "help"|*)
        show_help
        ;;
esac
